##!/bin/sh
## the next line restarts using tclsh \
#exec tclsh "$0" "$@"

## DON'T EDIT: The source of this part is src/base64.tcl
## The following Base64 encode code was extracted from the tcllib source code
## https://core.tcl-lang.org/tcllib/raw/f6bea09d4aa9768279d2b74f7ab4a114dfb7c0583beded9da44eda66e888b8f7?at=base64.tcl

# base64.tcl --
#
# Encode/Decode base64 for a string
# Stephen Uhler / Brent Welch (c) 1997 Sun Microsystems
# The decoder was done for exmh by Chris Garrigues
#
# Copyright (c) 1998-2000 by Ajuba Solutions.
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

# Version 1.0   implemented Base64_Encode, Base64_Decode
# Version 2.0   uses the base64 namespace
# Version 2.1   fixes various decode bugs and adds options to encode
# Version 2.2   is much faster, Tcl8.0 compatible
# Version 2.2.1 bugfixes
# Version 2.2.2 bugfixes
# Version 2.3   bugfixes and extended to support Trf
# Version 2.4.x bugfixes

    namespace eval base64 {
	variable base64 {}
	variable base64_en {}

	# We create the auxiliary array base64_tmp, it will be unset later.
	variable base64_tmp
	variable i

	set i 0
	foreach char {A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \
		a b c d e f g h i j k l m n o p q r s t u v w x y z \
		0 1 2 3 4 5 6 7 8 9 + /} {
	    set base64_tmp($char) $i
	    lappend base64_en $char
	    incr i
	}

	#
	# Create base64 as list: to code for instance C<->3, specify
	# that [lindex $base64 67] be 3 (C is 67 in ascii); non-coded
	# ascii chars get a {}. we later use the fact that lindex on a
	# non-existing index returns {}, and that [expr {} < 0] is true
	#

	# the last ascii char is 'z'
	variable char
	variable len
	variable val

	scan z %c len
	for {set i 0} {$i <= $len} {incr i} {
	    set char [format %c $i]
	    set val {}
	    if {[info exists base64_tmp($char)]} {
		set val $base64_tmp($char)
	    } else {
		set val {}
	    }
	    lappend base64 $val
	}

	# code the character "=" as -1; used to signal end of message
	scan = %c i
	set base64 [lreplace $base64 $i $i -1]

	# remove unneeded variables
	unset base64_tmp i char len val

	namespace export encode
    }

    # ::base64::encode --
    #
    #	Base64 encode a given string.
    #
    # Arguments:
    #	args	?-maxlen maxlen? ?-wrapchar wrapchar? string
    #
    #		If maxlen is 0, the output is not wrapped.
    #
    # Results:
    #	A Base64 encoded version of $string, wrapped at $maxlen characters
    #	by $wrapchar.

    proc ::base64::encode {args} {
	set base64_en $::base64::base64_en

	# Set the default wrapchar and maximum line length to match
	# the settings for MIME encoding (RFC 3548, RFC 2045). These
	# are the settings used by Trf as well. Various RFCs allow for
	# different wrapping characters and wraplengths, so these may
	# be overridden by command line options.
	set wrapchar "\n"
	set maxlen 76

	if { [llength $args] == 0 } {
	    error "wrong # args: should be \"[lindex [info level 0] 0]\
		    ?-maxlen maxlen? ?-wrapchar wrapchar? string\""
	}

	set optionStrings [list "-maxlen" "-wrapchar"]
	for {set i 0} {$i < [llength $args] - 1} {incr i} {
	    set arg [lindex $args $i]
	    set index [lsearch -glob $optionStrings "${arg}*"]
	    if { $index == -1 } {
		error "unknown option \"$arg\": must be -maxlen or -wrapchar"
	    }
	    incr i
	    if { $i >= [llength $args] - 1 } {
		error "value for \"$arg\" missing"
	    }
	    set val [lindex $args $i]

	    # The name of the variable to assign the value to is extracted
	    # from the list of known options, all of which have an
	    # associated variable of the same name as the option without
	    # a leading "-". The [string range] command is used to strip
	    # of the leading "-" from the name of the option.
	    #
	    # FRINK: nocheck
	    set [string range [lindex $optionStrings $index] 1 end] $val
	}

	# [string is] requires Tcl8.2; this works with 8.0 too
	if {[catch {expr {$maxlen % 2}}]} {
	    return -code error "expected integer but got \"$maxlen\""
	} elseif {$maxlen < 0} {
	    return -code error "expected positive integer but got \"$maxlen\""
	}

	set string [lindex $args end]

	set result {}
	set state 0
	set length 0


	# Process the input bytes 3-by-3

	binary scan $string c* X

	foreach {x y z} $X {
	    ADD [lindex $base64_en [expr {($x >>2) & 0x3F}]]
	    if {$y != {}} {
		ADD [lindex $base64_en [expr {(($x << 4) & 0x30) | (($y >> 4) & 0xF)}]]
		if {$z != {}} {
		    ADD [lindex $base64_en [expr {(($y << 2) & 0x3C) | (($z >> 6) & 0x3)}]]
		    ADD [lindex $base64_en [expr {($z & 0x3F)}]]
		} else {
		    set state 2
		    break
		}
	    } else {
		set state 1
		break
	    }
	}
	if {$state == 1} {
	    ADD [lindex $base64_en [expr {(($x << 4) & 0x30)}]]
	    ADD =
	    ADD =
	} elseif {$state == 2} {
	    ADD [lindex $base64_en [expr {(($y << 2) & 0x3C)}]]
	    ADD =
	}
	return $result
    }

    proc ::base64::ADD {x} {
	# The line length check is always done before appending so
	# that we don't get an extra newline if the output is a
	# multiple of $maxlen chars long.

	upvar 1 maxlen maxlen length length result result wrapchar wrapchar
	if {$maxlen && $length >= $maxlen} {
	    append result $wrapchar
	    set length 0
	}
	append result $x
	incr length
	return
    }


## DON'T EDIT: The source of this part is src/sha1.tcl
##############
## sha1 hashing from tcllib
##############
namespace eval ::sha1 {
	variable K

	proc initK {} {
	    variable K {}
	    foreach t {
		0x5A827999
		0x6ED9EBA1
		0x8F1BBCDC
		0xCA62C1D6
	    } {
		for {set i 0} {$i < 20} {incr i} {
		    lappend K [expr {int($t)}]
		}
	    }
	}
	initK
}

 

    proc ::sha1::sha1 {msg} {
	variable K

	#
	# 4. MESSAGE PADDING
	#

	# pad to 512 bits (512/8 = 64 bytes)

	set msgLen [string length $msg]

	# last 8 bytes are reserved for msgLen
	# plus 1 for "1"

	set padLen [expr {56 - $msgLen%64}]
	if {$msgLen % 64 >= 56} {
	    incr padLen 64
	}

	# 4a. and b. append single 1b followed by 0b's
	append msg [binary format "a$padLen" \200]

	# 4c. append 64-bit length
	# Our implementation obviously limits string length to 32bits.
	append msg \0\0\0\0[binary format "I" [expr {8*$msgLen}]]
    
	#
	# 7. COMPUTING THE MESSAGE DIGEST
	#

	# initial H buffer

	set H0 [expr {int(0x67452301)}]
	set H1 [expr {int(0xEFCDAB89)}]
	set H2 [expr {int(0x98BADCFE)}]
	set H3 [expr {int(0x10325476)}]
	set H4 [expr {int(0xC3D2E1F0)}]

	#
	# process message in 16-word blocks (64-byte blocks)
	#

	# convert message to array of 32-bit integers
	# each block of 16-words is stored in M($i,0-16)

	binary scan $msg I* words
	set blockLen [llength $words]

	for {set i 0} {$i < $blockLen} {incr i 16} {
	    # 7a. Divide M[i] into 16 words W[0], W[1], ...
	    set W [lrange $words $i [expr {$i+15}]]

	    # 7b. For t = 16 to 79 let W[t] = ....
	    set t   16
	    set t3  12
	    set t8   7
	    set t14  1
	    set t16 -1
	    for {} {$t < 80} {incr t} {
		set x [expr {[lindex $W [incr t3]] ^ [lindex $W [incr t8]] ^ \
			[lindex $W [incr t14]] ^ [lindex $W [incr t16]]}]
		lappend W [expr {($x << 1) | (($x >> 31) & 1)}]
	    }

	    # 7c. Let A = H[0] ....
	    set A $H0
	    set B $H1
	    set C $H2
	    set D $H3
	    set E $H4

	    # 7d. For t = 0 to 79 do
	    for {set t 0} {$t < 20} {incr t} {
		set TEMP [expr {(($A << 5) | (($A >> 27) & 0x1f)) + \
			(($B & $C) | ((~$B) & $D)) \
			+ $E + [lindex $W $t] + [lindex $K $t]}]
		set E $D
		set D $C
		set C [expr {($B << 30) | (($B >> 2) & 0x3fffffff)}]
		set B $A
		set A $TEMP
	    }
	    for {} {$t<40} {incr t} {
		set TEMP [expr {(($A << 5) | (($A >> 27) & 0x1f)) + \
			($B ^ $C ^ $D) \
			+ $E + [lindex $W $t] + [lindex $K $t]}]
		set E $D
		set D $C
		set C [expr {($B << 30) | (($B >> 2) & 0x3fffffff)}]
		set B $A
		set A $TEMP
	    }
	    for {} {$t<60} {incr t} {
		set TEMP [expr {(($A << 5) | (($A >> 27) & 0x1f)) + \
			(($B & $C) | ($B & $D) | ($C & $D)) \
			+ $E + [lindex $W $t] + [lindex $K $t]}]
		set E $D
		set D $C
		set C [expr {($B << 30) | (($B >> 2) & 0x3fffffff)}]
		set B $A
		set A $TEMP
	    }
	    for {} {$t<80} {incr t} {
		set TEMP [expr {(($A << 5) | (($A >> 27) & 0x1f)) + \
			($B ^ $C ^ $D) \
			+ $E + [lindex $W $t] + [lindex $K $t]}]
		set E $D
		set D $C
		set C [expr {($B << 30) | (($B >> 2) & 0x3fffffff)}]
		set B $A
		set A $TEMP
	    }

	    set H0 [expr {int(($H0 + $A) & 0xffffffff)}]
	    set H1 [expr {int(($H1 + $B) & 0xffffffff)}]
	    set H2 [expr {int(($H2 + $C) & 0xffffffff)}]
	    set H3 [expr {int(($H3 + $D) & 0xffffffff)}]
	    set H4 [expr {int(($H4 + $E) & 0xffffffff)}]
	}

	return [format %0.8x%0.8x%0.8x%0.8x%0.8x $H0 $H1 $H2 $H3 $H4]
    }


namespace eval seguid {

  set version 0.0.1.9007
  
  ##################
  ## Public API
  ##################
  proc seguid {seq {alphabet {{DNA}}} {form "long"}} {
    set mode "s"
    if {[set err [validate_text $seq $mode]] ne "ok" || [set err [validate_alphabet $seq $alphabet]] ne "ok"} {
      return "seguid error: $err"
    }
    return [calculate_seguid $seq $mode $form]
  }
  
  proc lsseguid {seq {alphabet {{DNA}}} {form "long"}} {
    set mode "lss"
    if {[set err [validate_text $seq $mode]] ne "ok" || [set err [validate_alphabet $seq $alphabet]] ne "ok"} {
      return "seguid error: $err"
    }
    return [calculate_seguid $seq $mode $form]
  }
  
  proc csseguid {seq {alphabet {{DNA}}} {form "long"}} {
    set mode "css"
    if {[set err [validate_text $seq $mode]] ne "ok" || [set err [validate_alphabet $seq $alphabet]] ne "ok"} {
      return "seguid error: $err"
    }
    return [calculate_seguid $seq $mode $form]
  }
  
  proc ldseguid {top bottom {alphabet {{DNA}}} {form "long"}} {
    set mode "lds"
    set seq [join [list $top [string reverse $bottom]] \n]
    if {[set err [validate_text $seq $mode]] ne "ok" || [set err [validate_alphabet $seq $alphabet]] ne "ok"} {
      return "seguid error: $err"
    }
    return [calculate_seguid $seq $mode $form]
  }
  
  proc cdseguid {top bottom {alphabet {{DNA}}} {form "long"}} {
    set mode "cds"
    set seq [join [list $top [string reverse $bottom]] \n]
    if {[set err [validate_text $seq $mode]] ne "ok" || [set err [validate_alphabet $seq $alphabet]] ne "ok"} {
      return "seguid error: $err"
    }
    return [calculate_seguid $seq $mode $form]
  }


  ##################
  ## Find ldseguid for linear or cdseguid for circular
  ##################
  proc calculate_seguid {text mode form} {
    global info
  
    if {[regexp {(.*)\n(.*)} $text -- top bottom]} {
      set bottom [string reverse $bottom]
      set text "$top;$bottom"
    } elseif {[regexp {(.*);(.*)} $text -- top bottom]} {
    }
      
    switch $mode {
      "lss" {
        set prefix "lsseguid="
      }
      "css" {
        lassign [short_rot $text] text --
        set prefix "csseguid="
      }
      "lds" {
        if {$top > $bottom} {
        set text "$bottom;$top"
        } 
        set prefix "ldseguid="
      }
      "cds" {
        set prefix "cdseguid="
        lassign [short_rot $top $bottom] t t1
        lassign [short_rot $bottom $top] b b1
    
        if {[string compare $t $b] < 0} {
        set text "$t;$t1"
        } else {
        set text "$b;$b1"
        }
      }
      "s" -
       default {
        set prefix "seguid="
      }
    }
    if {$mode ne "s"} {
      set base [string range [string map {+ -  / _} [::base64::encode [binary format H* [::sha1::sha1 $text]]]] 0 26]
    } else {
      set base [string range [::base64::encode [binary format H* [::sha1::sha1 $text]]] 0 26]
    }
    switch $form {
      "short" {
        return "[string range $base 0 5]"
      }
      "both" {
        return "[string range $base 0 5] $prefix$base"
       }
      "long" -
      default {
        return "$prefix$base"
      }
    }
  }
  
  
  ##################
  ## Find the shortest rotation of a string
  ##################
  proc short_rot {s {d ""}} {
    set b [string reverse $d]
    set bsf_b $b
  
    set bsf $s ;#best so far
    set len [string length $s]; # length of string
    set end $len
    append s $s; # duplicate string - makes rotations easier
    append b $b
  
    for {set i 1} {$i < $len} {incr i} {
      if {[string compare [string range $s $i $end] $bsf] < 0} { 
        set bsf [string range $s $i $end]
        set bsf_b [string range $b $i $end]
      } 
      incr end
    }
    # return best-so-far
    return [list $bsf [string reverse $bsf_b]]
  }
  
  
  ##########
  ## returns the reverse complement of the input
  ##########
  proc revcom {pattern} {
    set temp ""
    set length [string length $pattern]
    for {set i [expr {$length-1}]} {$i >= 0} {incr i -1} {
      append temp [string map {A T B V C G D H G C H D K M M K N N * * R Y S S T A V B W W Y R a t b v c g d h g c h d k m m k n n r y s s t a v b w w y r} [string index $pattern $i]]
    }
    return $temp
  }
  
  ##########
  ## returns the reverse of the input
  ##########
  proc rev {args} {
    set temp ""
    set pattern [join $args " "]
    foreach char [split $pattern ""] {
      set temp "$char$temp"
    }
    return $temp
  }
  
  ##########
  ## returns the complement of the input
  ##########
  proc com {args} {
    return [string map {A T B V C G D H G C H D K M M K N N * * R Y S S T A V B W W Y R a t b v c g d h g c h d k m m k n n r y s s t a v b w w y r} [join $args " "]]
  }
  
  
  proc sputs {args} {
    puts stdout "$args"
  }
  
  proc validate_alphabet {text alphabet} {
    regsub {\{DNA\}} $alphabet "CG,AT" alphabet
    regsub {\{RNA\}} $alphabet "CG,AU" alphabet
    regsub {\{protein\}} $alphabet "A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,O,U" alphabet
    regsub {\{DNA-extended\}} $alphabet "CG,AT,WW,SS,MK,RY,BV,DH,VB,NN" alphabet
    regsub {\{RNA-extended\}} $alphabet "CG,AU,WW,SS,MK,RY,BV,DH,VB,NN" alphabet
    regsub {\{protein-extended\}} $alphabet "A,C,D,E,F,G,H,I,K,L,M,N,P,Q,R,S,T,V,W,Y,B,O,U,J,Z,X" alphabet
  
    if {[regexp {(\{[^\,]*\}?)} $alphabet -- spec] || [regexp {([^\,]*\})} $alphabet -- spec]} {
      return "Unknown alphabet specification: $spec in alphabet: $alphabet" 
    }
    if {![regexp {[^\s]} $alphabet -- spec]} {
      return "Empty alphabet specification: $alphabet" 
    }
  
    regsub -all "," $alphabet "" allowed
    set allowed_list [lsort -unique [split $allowed ""]]
    set bottom_r {}
    if {[regexp {(.*)\n(.*)} $text -- top bottom] || [regexp {(.*);(.*)} $text -- top bottom_r] } {
    if {![regexp {^[[:alnum:]][[:alnum:]](\,[[:alnum:]][[:alnum:]])+$}  $alphabet]  } {
      return "Improperly formatted alphabet specification: $alphabet" 
    }
    lappend allowed_list "-"
    if {$bottom_r ne {}} {
      set bottom [string reverse $bottom_r]
    }
    set pairs_list [split $alphabet ","]
    foreach t [split $top ""] b [split $bottom ""] {
      if {$t eq {} || $b eq {}} {
        return "unbalanced lengths" 
      }
      if {$t ni $allowed_list } {
        return "invalid symbol: $t Allowed symbols: $allowed_list"
      }
      if { $b ni $allowed_list} {
        return "invalid symbol: $b. Allowed symbols: $allowed_list"
      }
      if {$t ne "-" && $b ne "-" && "$t$b" ni $pairs_list && "$b$t" ni $pairs_list} {
        return "incompatible sequences"
      }
    }
    } else {
      if { ![regexp {^[[:alnum:]](\,[[:alnum:]])+$}  $alphabet] && ![regexp {^[[:alnum:]][[:alnum:]](\,[[:alnum:]][[:alnum:]])+$}  $alphabet] } {
        return "Improperly formatted alphabet specification: $alphabet" 
      }
      foreach t [split $text ""] {
        if {$t ni $allowed_list} {
          return "invalid symbol: $t. Allowed symbols: $allowed_list"
        }
      }
    }
    return "ok"
  }
  
  proc validate_text {text mode} {
    if {[regexp {(\n.*\n)} $text] || ($mode in [list "lss" "css" "s"] && [regexp {[\n]} $text]) } {
      return "seguid error: too many lines"
    }
    if {[regexp {(;.*;)} $text] || ($mode in [list "lss" "css" "s"] && [regexp {[;]} $text]) } {
      return "seguid error: too many strands"
    }
    if {[regexp {([;\n].*[;\n])} $text]} {
      return "seguid error: both semicolon and return in input text"
    }
    if {$mode in [list "lds" "cds"] && ![regexp {[;\n]} $text]} {
      return "seguid error: only one strand specified for double stranded type"
    }
    
    if {$text eq {}} {
      return "seguid error: empty input"
    }
    
    if { ($mode ne "lds" && [regexp {([^[:alnum:];\n])} $text -- sym]) || [regexp {([^[:alnum:];\-\n])} $text -- sym]} {
      return "seguid error: invalid symbol: $sym"
    }
    return "ok"
  }
}

##################
## CLI
##################
proc main {} {
  if {[regexp -- {-version} $::argv]} {
      puts stdout "$seguid::version"
      exit
  }
     
  if {[regexp -- {-help} $::argv]} {
      puts stdout "--version"
      puts stdout "--help"
      puts stdout "Usage: seguid --type=(lds|cds|lss|css|s)eguid  --form=(long|short|both) --version --alphabet=({DNA}{RNA}{protein}{DNA-extended}{RNA-extended}{protein-extended},alphanumeric csv "
      exit
  }
  
  set mode "s"
  set form "long"
  set alphabet {{DNA}}
  
    regexp -- {type=(lds|cds|lss|css|s)eguid} $::argv -- mode
    regexp -- {form=(long|short|both)} $::argv -- form
    regexp -- {alphabet=([^\s\=]*)} $::argv -- alphabet
  
  
  
  set text_list ""
  while {[gets stdin line] >= 0} {
      lappend text_list $line
  }
  set text [join $text_list \n]
  
  if {[set err [seguid::validate_text $text $mode]] ne "ok"} {
    puts stderr "seguid error: $err"
    exit 1
  }
  
  if {[set err [seguid::validate_alphabet $text $alphabet]] ne "ok"} {
    puts stderr "seguid error: $err"
    exit 1
  }
  
  puts stdout [seguid::calculate_seguid $text $mode $form]
}

## Call 'main' only if this script was not source:d
if {[file tail [info script]] ne "seguid.tcl"} {
  main
}
